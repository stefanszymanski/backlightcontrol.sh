#!/usr/bin/env bash

# TODO add command list, lists unconfigured devices and how to use them with this script
# TODO error handling: configured device does not exist
# TODO bash autocompletion
# TODO zsh autocompletion

SYSFS_PATH="/sys/class/backlight"
CACHE_DIR="/tmp"

usage() {
    local _usage
    read -rd '' _usage <<'EOF'
Usage:
    backlightcontrol <command> [arguments...]

Commands:
    set [device] <value>    Set brightness for all of specific display
                            The value must be an integer between 0 and 100
    get [device]            Get brightness for all or specific display
    info [device]           Get info about all or specific display
    help                    Display this help text

Device formats:
    A device is either a configured name from environment variable
    BLCTL_DEVICES or has the form `type#identifier`.

Configuration:
    Devices may be configured via environment variable BLCTL_DEVICES. The
    configuration for each display consists of three parts and each display
    configuration is divived by a semicolon: `name:type:identifier;...`. Valid
    types are "sysfs" and "ddc". Valid identifiers for "sysfs" are names of
    directories in /sys/class/backlight/, for "ddc" it's a bus number expected
    from the --bus argument of `ddcutil`.

Examples:
    export BLCTL_DEVICES="lvds:sysfs:acpi_video0;hdmi:ddc:3"
    backlightcontrol set 50
    backlightcontrol set lvds 50
    backlightcontrol set sysfs#acpi_video1 50
    backlightcontrol set ddc#2 50
    backlightcontrol get
    backlightcontrol get hdmi
    backlightcontrol info lvds
EOF
    printf '%s\n' "$_usage"
    exit "$1"
}

sysfs_max() {
    echo "$(<"$SYSFS_PATH/$1/max_brightness")"
}

sysfs_get() {
    echo "$(<"$SYSFS_PATH/$1/brightness")"
}

sysfs_set() {
    echo "$2" > "$SYSFS_PATH/$1/brightness"
}

_ddc_read() {
    ddcutil --terse --bus="$1" getvcp 10
}

_ddc_max_cache_name() {
    echo "$CACHE_DIR/brightness_ddc_max_$1"
}

_ddc_cache_create() {
    local PARTS
    IFS=$' ' read -d "" -ra PARTS <<< "$(_ddc_read "$1")"
    echo "${PARTS[4]}" > "$(_ddc_max_cache_name "$1")"
}

ddc_max() {
    local FILE
    FILE=$(_ddc_max_cache_name "$1")
    [[ ! -r "$FILE" ]] && _ddc_cache_create "$1"
    echo "$(<"$FILE")"
}

ddc_get() {
    local PARTS
    IFS=$' ' read -d "" -ra PARTS <<< "$(_ddc_read "$1")"
    echo "${PARTS[3]}"
}

ddc_set() {
    ddcutil --bus="$1" setvcp 10 "$2"
}

parse_target() {
    if [[ $1 =~ ^([[:alnum:]]+)#([[:alnum:]]+)$ ]]; then
        _TYPE=${BASH_REMATCH[1]}
        _DEV=${BASH_REMATCH[2]}
        _NAME="$1"
        DEVICES+=("$_NAME:$_TYPE:$_DEV")
    fi
}

_call() {
    local NAME TYPE DEV
    parse_target "$TARGET"
    for DEV_CONFIG in "${DEVICES[@]}"; do
        IFS=':' read -d "" -ra PARTS <<< "$DEV_CONFIG:"
        [[ "${#PARTS[@]}" -lt 3 ]] && continue
        NAME="${PARTS[0]}"
        TYPE="${PARTS[1]}"
        DEV="${PARTS[2]}"
        [[ -n $TARGET ]] && [[ "$TARGET" != "$NAME" ]] && continue
        case "$TYPE" in
            sysfs|ddc) _call_"${CMD}";;
            *) echo "Invalid type '$TYPE'" ;;
        esac
    done
}

_call_get() {
    local _VALUE _MAX
    _VALUE=$("${TYPE}"_get "$DEV")
    _MAX=$("${TYPE}"_max "$DEV")
    ((VALUE=_VALUE*100/_MAX))
    echo "$NAME $VALUE"
}

_call_set() {
    local _MAX
    _MAX=$("${TYPE}"_max "$DEV")
    ((_VALUE=_MAX*VALUE/100))
    "${TYPE}"_set "$DEV" "$_VALUE"
}

_call_info() {
    local VALUE _TYPE _VALUE _MAX
    _VALUE=$("${TYPE}"_get "$DEV")
    _MAX=$("${TYPE}"_max "$DEV")
    ((VALUE=_VALUE*100/_MAX))
    case "$TYPE" in
        sysfs) _TYPE="sysfs" ;;
        ddc) _TYPE="DDC/CI" ;;
    esac
    echo "Device: $NAME"
    echo "    Type      $_TYPE"
    echo "    Config    $DEV_CONFIG"
    echo "    Current   $VALUE/100"
    echo "    Original  $_VALUE/$_MAX"
}

run_set() {
    local TARGET VALUE
    if [[ -n $1 ]] && [[ -n $2 ]]; then
        TARGET=$1
        VALUE=$2
    else
        VALUE=$1
    fi
    if [[ ! "${VALUE}" =~ ^[[:digit:]]+$ ]]; then
        echo "The value must be an integer between 0 and 100"
        exit 1
    fi
    _call
}

run_get() {
    local TARGET=$1
    _call
}

run_info() {
    local TARGET=$1
    _call
}

IFS=$';' read -d "" -ra DEVICES <<< "$BLCTL_DEVICES;"

_CMD=$1
shift

case "$_CMD" in
    set|s) CMD="set" ;;
    get|g) CMD="get" ;;
    info|i) CMD="info" ;;
    help|h) usage 0 ;;
    *) usage 1 ;;
esac

run_"${CMD}" "$@"

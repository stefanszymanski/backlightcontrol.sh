#!/usr/bin/env bash

# DONE configure devices via environment variables
#      BLCTL_DEVICES="sysfs:acpi_video0:lvds;ddc:1:hdmi"
# DONE let's use devices that are not configured
#      `set ddc#1 50`
# TODO add command list, lists unconfigured devices and how to use them with this script
# TODO error handling: configured device does not exist
# DONE add command set
#      `set hdmi 50` - set specific device
#      `set 50`      - set all devices
# DONE add command get
#      `get hdmi`    - get specific device
#      `get`         - get all devices
# DONE add command info, show configuration and original values
# TODO add help command (including hint for `modprobe i2c-dev`)
# TODO bash autocompletion
# TODO zsh autocompletion

SYSFS_PATH="/sys/class/backlight"
CACHE_DIR="/tmp"

# _calc_value() {
#     local VALUE
#     ((VALUE=$1*$2/100))
#     echo $VALUE
# }

# _calc_value_reverse() {
#     local VALUE
#     ((VALUE=$1*100/$2))
#     echo $VALUE
# }


sysfs_max() {
    echo "$(<"$SYSFS_PATH/$1/max_brightness")"
}

sysfs_get() {
    echo "$(<"$SYSFS_PATH/$1/brightness")"
}

sysfs_set() {
    echo $2 > "$SYSFS_PATH/$1/brightness"
}

_ddc_read() {
    local OUT=$(ddcutil -d $1 getvcp 10)
    local MAX CUR
    [[ $OUT =~ max[[:space:]]*value[[:space:]]*=[[:space:]]*([0-9]+) ]] && MAX=${BASH_REMATCH[1]}
    [[ $OUT =~ current[[:space:]]*value[[:space:]]*=[[:space:]]*([0-9]+) ]] && CUR=${BASH_REMATCH[1]}
    echo "$CUR"
    echo "$MAX"
}

_ddc_cache_create() {
    local VALUES=($(_ddc_read $1))
    echo "${VALUES[1]}" > "$CACHE_DIR/brightness_ddc_max_$1"
}

_ddc_max_cache_name() {
    echo "$CACHE_DIR/brightness_ddc_max_$1"
}

ddc_max() {
    local DEV=$1
    local FILE=$(_ddc_max_cache_name $DEV)
    [[ ! -r "$FILE" ]] && _ddc_cache_create "$DEV"
    echo "$(<"$FILE")"
}

ddc_get() {
    local VALUES=($(_ddc_read $1))
    echo "${VALUES[0]}"
}

ddc_set() {
    ddcutil -d $1 setvcp 10 $2
}

parse_target() {
    if [[ $1 =~ ^([[:alnum:]]+)#([[:alnum:]]+)$ ]]; then
        _TYPE=${BASH_REMATCH[1]}
        _DEV=${BASH_REMATCH[2]}
        _NAME="$1"
        DEVICES+=("$_NAME:$_TYPE:$_DEV")
    fi
}

_call() {
    local NAME TYPE DEV
    parse_target "$TARGET"
    for DEV_CONFIG in "${DEVICES[@]}"; do
        IFS=':' read -d "" -ra PARTS <<< "$DEV_CONFIG"
        [[ "${PARTS[@]}" < 3 ]] && continue
        NAME="${PARTS[0]}"
        TYPE="${PARTS[1]}"
        DEV="${PARTS[2]}"
        [[ -n $TARGET ]] && [[ "$TARGET" != "$NAME" ]] && continue
        case "$TYPE" in
            sysfs|ddc) _call_${CMD};;
            *) echo "Invalid type '$TYPE'" ;;
        esac
    done
}

_call_get() {
    local _VALUE=$(${TYPE}_get $DEV)
    local _MAX=$(${TYPE}_max $DEV)
    ((VALUE=_VALUE*100/_MAX))
    echo "$NAME $VALUE"
}

_call_set() {
    local _MAX=$(${TYPE}_max $DEV)
    ((_VALUE=_MAX*VALUE/100))
    $(${TYPE}_set $DEV $_VALUE)
}

_call_info() {
    local VALUE _TYPE
    local _VALUE=$(${TYPE}_get $DEV)
    local _MAX=$(${TYPE}_max $DEV)
    ((VALUE=_VALUE*100/_MAX))
    case "$TYPE" in
        sysfs) _TYPE="sysfs" ;;
        ddc) _TYPE="DDC/CI" ;;
    esac
    echo "Device: $NAME"
    echo "    Type      $_TYPE"
    echo "    Config    $DEV_CONFIG"
    echo "    Current   $VALUE/100"
    echo "    Original  $_VALUE/$_MAX"
}

run_set() {
    local TARGET VALUE
    if [[ -n $1 ]] && [[ -n $2 ]]; then
        TARGET=$1
        VALUE=$2
    else
        VALUE=$1
    fi
    if [[ ! "${VALUE}" =~ ^[[:digit:]]+$ ]]; then
        echo "The value must be an integer between 0 and 100"
        exit 1
    fi
    _call
}

run_get() {
    local TARGET=$1
    _call
}

run_info() {
    local TARGET=$1
    _call
}

IFS=$';' read -d "" -ra DEVICES <<< "$BLCTL_DEVICES;"

CMD=$1
shift

case "$CMD" in
    set|s) run_set $@ ;;
    get|g) run_get $@ ;;
    info|i) run_info $@ ;;
    *) echo "help: not implemented, yet";;
esac
